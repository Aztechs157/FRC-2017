// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc157.ProtoBot2017.commands;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc157.ProtoBot2017.Robot;
import org.usfirst.frc157.ProtoBot2017.subsystems.Climb;

/**
 *
 */
public class ClimbCommand extends Command {
    public enum ClimbCommandSpeed
    {
        IDLE,
        SLOW,
        FAST  
    }

    private ClimbCommandSpeed climbCommand; 

    public ClimbCommand(ClimbCommandSpeed command) {
        climbCommand = command;
        requires(Robot.climb);      
    }
    
    // Called just before this Command runs the first time
    protected void initialize() {
        System.out.println("Climb: initialize(" + climbCommand + ")");

        if (climbCommand == ClimbCommandSpeed.FAST )
        {
            Robot.climb.fast();
        }
        else if (climbCommand == ClimbCommandSpeed.SLOW)
        {
            Robot.climb.slow();
        }
        else if(climbCommand == ClimbCommandSpeed.IDLE)
        {
            Robot.climb.idle();
        }
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
     }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
        System.out.println("Climb: end()");
        Robot.climb.idle();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        System.out.println("Climb: interrupted()");
        Robot.climb.idle();
    }
}

