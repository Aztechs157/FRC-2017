// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc157.ProtoBot2017.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.GenericHID.RumbleType;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc157.ProtoBot2017.commands.AutoDriveSpeedForTime;
import org.usfirst.frc157.ProtoBot2017.commands.GearStateCommand.GearState;
import org.usfirst.frc157.ProtoBot2017.subsystems.Gear;
//import org.usfirst.frc157.FRC2016.commands.PrintButton;
import org.usfirst.frc157.ProtoBot2017.Robot;
import org.usfirst.frc157.ProtoBot2017.RobotMap;
import org.usfirst.frc157.ProtoBot2017.AnalogSelectSwitch.SwitchPosition;
import com.ctre.CANTalon;

/**
 *
 */
public class AutonomousCommand2 extends Command {

   
    public AutonomousCommand2() {
     	requires(Robot.gear);

    }
    private boolean finished;
    private double drivetime ;
    private double timeStart;
    
    public enum AutoGearState
    {
        DRIVINGFORWARD,
        OPENINGGEAR,
        BACKINGUP
    }
    
    
    private AutoGearState currentState;
    
    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        System.out.println("AutoCommand2: initialize()");
        finished = false;
        currentState= AutoGearState.DRIVINGFORWARD;  
        drivetime= 1.0;
        timeStart = Timer.getFPGATimestamp();
    }
    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        switch (currentState) {
            
            case DRIVINGFORWARD: 
                if(Timer.getFPGATimestamp()<= (timeStart + drivetime))
                {
                    Robot.drive.driveBot(0, -.3, 0);
                }
                else
                {
                    Robot.drive.driveBot(0, 0, 0);
                    currentState=AutoGearState.OPENINGGEAR;
                }
                break;
                
            case OPENINGGEAR:
                if (Robot.gear.isOpen()) {
                    drivetime=drivetime/2;
                    timeStart = Timer.getFPGATimestamp();
                    currentState=AutoGearState.BACKINGUP;
                } else {
                    Robot.gear.open();
                }
                break;
                
            case BACKINGUP:
                if(Timer.getFPGATimestamp()<= (timeStart + drivetime))
                {
                    Robot.drive.driveBot(0, .5, 0);
                }
                else
                {
                    Robot.drive.driveBot(0, 0, 0);
                    finished=true;
                }
                break;
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
//        System.out.println("GearStateCommand: finished()");
        return  finished;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        System.out.println("AutoCOmmand2: end()");
        Robot.gear.close();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        System.out.println("AutoCOmmand2: interrupted()");
        
    }
}