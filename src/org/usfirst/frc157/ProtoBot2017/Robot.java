// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc157.ProtoBot2017;

import org.usfirst.frc157.ProtoBot2017.AnalogSelectSwitch.SwitchPosition;
import org.usfirst.frc157.ProtoBot2017.commands.AlignForShot;
import org.usfirst.frc157.ProtoBot2017.commands.AlignForShot.AcquisitionType;
import org.usfirst.frc157.ProtoBot2017.commands.AlignForShot.ShotRangeCommand;
import org.usfirst.frc157.ProtoBot2017.commands.AutoDriveSpeedForTime;
import org.usfirst.frc157.ProtoBot2017.commands.AutonomousCommand;
import org.usfirst.frc157.ProtoBot2017.commands.GearStateCommand;
import org.usfirst.frc157.ProtoBot2017.commands.ShootCommand;
import org.usfirst.frc157.ProtoBot2017.subsystems.Climb;
import org.usfirst.frc157.ProtoBot2017.subsystems.Collect;
import org.usfirst.frc157.ProtoBot2017.subsystems.Drive;
import org.usfirst.frc157.ProtoBot2017.subsystems.Gate;
import org.usfirst.frc157.ProtoBot2017.subsystems.Gear;
import org.usfirst.frc157.ProtoBot2017.subsystems.Helix;
import org.usfirst.frc157.ProtoBot2017.subsystems.Shoot;
import org.usfirst.frc157.ProtoBot2017.subsystems.Vision;
import org.usfirst.frc157.ProtoBot2017.subsystems.Helix.MotorSense;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	Command autonomousCommand;

	public static OI oi;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static Drive drive;
	public static Gear gear;
	public static Vision vision;
	public static Shoot shoot;
	public static Collect collect;
	public static Climb climb;
	public static Helix leftHelix;
	public static Helix rightHelix;
	public static Gate leftGate;
	public static Gate rightGate;


	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		RobotMap.init();
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		drive = new Drive();
		gear = new Gear();
		vision = new Vision();
		shoot = new Shoot();
		collect = new Collect(); 
		climb = new Climb();
		leftHelix = new Helix("Left", RobotMap.helixMotorLeft, MotorSense.NORMAL);
		rightHelix = new Helix("Right", RobotMap.helixMotorRight, MotorSense.NORMAL);
		leftGate = new Gate(RobotMap.leftGateRelay);
		rightGate = new Gate(RobotMap.rightGateRelay);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		//(which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// instantiate the command used for the autonomous period
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	}

	/**
	 * This function is called when the disabled button is hit.
	 * You can use it to reset subsystems before shutting down.
	 */
	public void disabledInit(){

	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	public void autonomousInit() {

		SwitchPosition switchPosition = SwitchPosition.POSITION_0;		
		switchPosition  = RobotMap.modeSelect.getPosition();
		
		switch(switchPosition)
		{
		/*
		 * Autonomuous commands 
		 * drive forward 6ft(done)
		 * drive forward 4 ft reverse 2ft 
		 * drive forward 2-3 ft turn left camera shoot 
		 * drive to deliver gear
		 */
		case POSITION_0:
		{
			System.out.println("\n*********************************\n");
			System.out.println("Autonomous Position 0");
			// do nothing case 
		} break;

		case POSITION_1:
		{
			System.out.println("\n*********************************\n");
			System.out.println("Autonomous Position 1");
			// Drive forward 6 ft
			CommandGroup autoCommand = new CommandGroup();
			autoCommand.addSequential(new AutoDriveSpeedForTime(5.0, 0,- 0.5, 0));
			// schedule the autonomous command 
			if (autoCommand != null) autoCommand.start();
			
		} break;
		case POSITION_2:
		{
			System.out.println("\n*********************************\n");
			System.out.println("Autonomous Position 2");
			//drive forward 4 ft backup 2 
			CommandGroup autoCommand = new CommandGroup();
			autoCommand.addSequential(new AutoDriveSpeedForTime(2.5, 0,- 0.5, 0));
			autoCommand.addSequential(new AutoDriveSpeedForTime(0.75,0, 0.5, 0));
			// schedule the autonomous command 
			if (autoCommand != null) autoCommand.start();
		} break;

		case POSITION_3:
		{
			System.out.println("\n*********************************\n");
			System.out.println("Autonomous Position 3");
			CommandGroup autoCommand = new CommandGroup();
			autoCommand.addSequential(new AutoDriveSpeedForTime(5.0, 0, -0.5, 0));
			//autoCommand.addSequential(new AutoDriveSpeedForTime(1.0, 0, 0.5, 0));
            autoCommand.addSequential(new AutoDriveSpeedForTime(2.0,0,0,-0.5));// turn right 
            autoCommand.addSequential(new AlignForShot(AlignForShot.ShotRangeCommand.NEAR,AcquisitionType.RIGHT)); //align for shot
            autoCommand.addSequential(new ShootCommand(ShootCommand.ShotRangeCommand.NEAR));// parameter =? 
            if (autoCommand != null) autoCommand.start();
		} break;

		case POSITION_4:
		{
			System.out.println("\n*********************************\n");
			System.out.println("Autonomous Position 4");
			CommandGroup autoCommand = new CommandGroup();
			   autoCommand.addSequential(new AutoDriveSpeedForTime(3.0, 0, -0.5, 0));// move forward
	            autoCommand.addSequential(new AutoDriveSpeedForTime(2.0,0,0,0.5));// turn 60 deg
	            autoCommand.addSequential(new GearStateCommand());// drop gear  
	            autoCommand.addSequential(new AutoDriveSpeedForTime(2.0 ,0,0.5,0));// move backward
	            if (autoCommand != null) autoCommand.start();
		} break;
		case POSITION_5:
		{
			System.out.println("\n*********************************\n");
			System.out.println("Autonomous Position 5");
			//CommandGroup autoCommand = new CommandGroup();

            //drive to gear
		} break;

		}
		autonomousCommand = new AutonomousCommand();

		// At the start of autonomous define the robot orientation as the 0 heading
		Robot.drive.resetZeroHeading();

	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
	}

	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null) autonomousCommand.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
	}
}
